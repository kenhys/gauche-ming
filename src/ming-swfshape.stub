;; -*- mode:scheme; coding:utf-8 -*-

"
#include \"ming.h\"
#include \"gauche_ming.h\"
"

(include "gauche-ming.types")

"typedef unsigned char byte;"


(define-enum SWF_SHAPE1)
(define-enum SWF_SHAPE2)
(define-enum SWF_SHAPE3)
(define-enum SWF_SHAPE4)

(define-enum SWF_SHAPE_USESCALINGSTROKES)
(define-enum SWF_SHAPE_USENONSCALINGSTROKES)

(define-cproc new-swf-shape () ::<swf-shape>
  (let* ((shape::ScmSWFShape* (SCM_NEW ScmSWFShape)))
    (SCM_SET_CLASS shape SCM_CLASS_SWF_SHAPE)
    (set! (-> shape h) (newSWFShape))
    (result shape)))

(define-cproc destroy-swf-shape (shape::<swf-shape>) ::<void>
  (destroySWFShape (-> shape h)))

(define-cproc swf-shape-end (shape::<swf-shape>) ::<void>
  (SWFShape_end (-> shape h)))

(define-cproc swf-shape-use-version (shape::<swf-shape> version::<fixnum>) ::<void>
  (SWFShape_useVersion (-> shape h) version))

(define-cproc swf-shape-get-version (shape::<swf-shape>) ::<fixnum>
  (result (SWFShape_getVersion (-> shape h))))

(define-cproc swf-shape-set-render-hinting-flags (shape::<swf-shape> flags::<fixnum>) ::<void>
  (SWFShape_setRenderHintingFlags (-> shape h) flags))

(define-cproc swf-shape-move-pen-to (shape::<swf-shape> x::<real> y::<real>) ::<void>
  (SWFShape_movePenTo (-> shape h) x y))

(define-cproc swf-shape-move-pen (shape::<swf-shape> x::<real> y::<real>) ::<void>
  (SWFShape_movePen (-> shape h) x y))

(define-cproc swf-shape-get-pen-x (shape::<swf-shape>) ::<real>
  (result (SWFShape_getPenX (-> shape h))))

(define-cproc swf-shape-get-pen-y (shape::<swf-shape>) ::<real>
  (result (SWFShape_getPenY (-> shape h))))

;;(define-cproc swf-shape-get-pen (shape::<swf-shape>) ::<real>
;;  (result (SWFShape_getPenY (-> shape h))))

(define-cproc swf-shape-draw-line-to (shape::<swf-shape> x::<real> y::<real>) ::<void>
  (SWFShape_drawLineTo (-> shape h) x y))

(define-cproc swf-shape-draw-line (shape::<swf-shape> x::<real> y::<real>) ::<void>
  (SWFShape_drawLine (-> shape h) x y))

(define-cproc swf-shape-draw-curve-to
  (shape::<swf-shape> controlx::<real> controly::<real> anchorx::<real> anchory::<real>) ::<void>
  (SWFShape_drawCurveTo (-> shape h) controlx controly anchorx anchory))

(define-cproc swf-shape-draw-curve
  (shape::<swf-shape> controlx::<real> controly::<real> anchorx::<real> anchory::<real>) ::<void>
  (SWFShape_drawCurve (-> shape h) controlx controly anchorx anchory))

(define-cproc swf-shape-hide-line
  (shape::<swf-shape>) ::<void>
  (SWFShape_hideLine (-> shape h)))

;; (define-cproc swf-shape-add-solid-fill-style
;;   (shape::<swf-shape> width::<fixnum> r g b a) ::<swf-fill-style>
;;   (SWFShape_addSolidFillStyle (-> shape h) r g b a))

;; shape_util.h

(define-cproc swf-shape-set-line
  (shape::<swf-shape> width::<ushort> r::<uint8> g::<uint8> b::<uint8> a::<uint8>) ::<void>
  (SWFShape_setLine (-> shape h) width r g b a))

(define-cproc swf-shape-set-line2
  (shape::<swf-shape> 
   width::<ushort> r::<uint8> g::<uint8> b::<uint8> a::<uint8>
   fill::<swf-fill-style> flags::<int> miterLimit::<float>) ::<void>
   (SWFShape_setLine (-> shape h) width r g b a (-> fill h) flags miterLimit))

(define-cproc swf-shape-add-solid-fill-style
  (shape::<swf-shape> r::<uint8> g::<uint8> b::<uint8> a::<uint8>) ::<swf-fill>
  (result SWFShape_addSolidFillStyle (-> shape h) r g b a))

(define-cproc swf-shape-add-gradient-fill
  (shape::<swf-shape> gradient::<swf-gradient> flags::<uint8>) ::<swf-fill>
  (result (SWFShape_addGradientFill (-> shape h) (-> gradient h) flags)))

(define-cproc swf-shape-add-bitmap-fill
  (shape::<swf-shape> bitmap::<swf-bitmap> flags::<uint8>) ::<swf-fill>
  (result (SWFShape_addBitmapFill (-> shape h) (-> bitmap h) flags)))

(define-cproc swf-shape-set-left-fill
  (shape::<swf-shape> fill::<swf-fill>) ::<void>
  (SWFShape_setLeftFill (-> shape h) (-> fill h)))

(define-cproc swf-shape-set-right-fill
  (shape::<swf-shape> fill::<swf-fill>) ::<void>
  (SWFShape_setRightFill (-> shape h) (-> fill h)))

(define-cproc swf-shape-draw-arc
  (shape::<swf-shape>
   r::<double> startAngle::<double> endAngle::<double>) ::<void>
   (SWFShape_drawArc (-> shape h) r startAngle endAngle))

(define-cproc swf-shape-draw-circle
  (shape::<swf-shape> r::<double>) ::<void>
  (SWFShape_drawCircle (-> shape h) r))

/* draw character c from font font into shape shape at size size */
(define-cprocswf-shape-draw-glyph
  (shape::<swf-shape> font::<swf-font> c::<ushort>)
  (SWFShape_drawGlyph (-> shape h) (-> font h) c))

(define-cproc swf-shape-draw-sized-glyph
  (shape::<swf-shape> font::<swf-font> c::<ushort> size::<int>) ::<void>
  (SWFShape_drawSizedGlyph (-> shape h) (-> font h) c size))

  /* Deprecated: */
  #define SWFShape_drawFontGlyph(s,f,c) SWFShape_drawGlyph(s,f,c)

/* approximate a cubic bezier with quadratic segments */
/* returns the number of segments used */
(define-cproc swf-shape-draw-cubic
  (shape::<swf-shape>
   bx::<double> by::<double> cx::<double> cy::<double> dx::<double>
   dy::<double>) ::<int>
   (result (SWFShape_drawCubic (-> shape h) bx by cx cy dx dy)))

(define-cproc swf-shape-draw-cubic-to
  (shape::<swf-shape>
   bx::<double> by::<double> cx::<double> cy::<double> dx::<double>
   dy::<double>) ::<int>
   (result (SWFShape_drawCubic (-> shape h) bx by cx cy dx dy)))

(define-cproc swf-shape-draw-character-bounds
  (shape::<swf-shape> character::<swf-character>) ::<void>
  (SWFShape_drawCharacterBounds (-> shape h) (-> character h)))

