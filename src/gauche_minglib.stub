;;;
;;; gauche_minglib.stub
;;;

"
#include \"ming.h\"
#include \"gauche_ming.h\"
"

;; The following entry is a dummy one.
;; Replace it for your definitions.

(define-cproc test-gauche_ming () ::<const-cstring>
  (result "gauche_ming is working"))

(define-cclass <swf-bitmap> :base "ScmSWFBitmap*" "Scm_SWFBitmapClass"
  ()
  ()
  [allocator
   (let* ([ctx::ScmSWFBitmap* (SCM_ALLOCATE ScmSWFBitmap klass)])
     (SCM_SET_CLASS ctx klass)
     (return (SCM_OBJ ctx)))])

(define-cclass <swf-shape> :base "ScmSWFShape*" "Scm_SWFShapeClass"
  ()
  ()
  [allocator
   (let* ([ctx::ScmSWFShape* (SCM_ALLOCATE ScmSWFShape klass)])
     (SCM_SET_CLASS ctx klass)
     (set! (-> ctx h) (newSWFShape))
     (return (SCM_OBJ ctx)))])

(define-cclass <swf-font> :base "ScmSWFFont*" "Scm_SWFFontClass"
  ()
  ()
  [allocator
   (let* ([ctx::ScmSWFFont* (SCM_ALLOCATE ScmSWFFont klass)])
     (SCM_SET_CLASS ctx klass)
     (return (SCM_OBJ ctx)))])

(define-cclass <swf-fill> :base "ScmSWFFill*" "Scm_SWFFillClass"
  ()
  ()
  [allocator
   (let* ([ctx::ScmSWFFill* (SCM_ALLOCATE ScmSWFFill klass)])
     (SCM_SET_CLASS ctx klass)
     (return (SCM_OBJ ctx)))])

(define-cclass <swf-fill-style> :base "ScmSWFFillStyle*" "Scm_SWFFillStyleClass"
  ()
  ()
  [allocator
   (let* ([ctx::ScmSWFFillStyle* (SCM_ALLOCATE ScmSWFFillStyle klass)])
     (SCM_SET_CLASS ctx klass)
     (return (SCM_OBJ ctx)))])

(define-cclass <swf-line-style> :base "ScmSWFLineStyle*" "Scm_SWFLineStyleClass"
  ()
  ()
  [allocator
   (let* ([ctx::ScmSWFLineStyle* (SCM_ALLOCATE ScmSWFLineStyle klass)])
     (SCM_SET_CLASS ctx klass)
     (return (SCM_OBJ ctx)))])

(define-cclass <swf-gradient> :base "ScmSWFGradient*" "Scm_SWFGradientClass"
  ()
  ()
  [allocator
   (let* ([ctx::ScmSWFGradient* (SCM_ALLOCATE ScmSWFGradient klass)])
     (SCM_SET_CLASS ctx klass)
     (return (SCM_OBJ ctx)))])

(define-cclass <swf-movie> :base "ScmSWFMovie*" "Scm_SWFMovieClass"
  ()
  ()
  [allocator
   (let* ([ctx::ScmSWFMovie* (SCM_ALLOCATE ScmSWFMovie klass)])
     (SCM_SET_CLASS ctx klass)
     (set! (-> ctx h) (newSWFMovie))
     (return (SCM_OBJ ctx)))])

(define-cclass <swf-movie-block-type> :base "ScmSWFMovieBlockType*" "Scm_SWFMovieBlockTypeClass"
  ()
  ()
  [allocator
   (let* ([ctx::ScmSWFMovieBlockType* (SCM_ALLOCATE ScmSWFMovieBlockType klass)])
     (SCM_SET_CLASS ctx klass)
     (return (SCM_OBJ ctx)))])

(define-cclass <swf-text> :base "ScmSWFText*" "Scm_SWFTextClass"
  ()
  ()
  [allocator
   (let* ([ctx::ScmSWFText* (SCM_ALLOCATE ScmSWFText klass)])
     (SCM_SET_CLASS ctx klass)
     (return (SCM_OBJ ctx)))])

(define-cclass <swf-display-item> :base "ScmSWFDisplayItem*" "Scm_SWFDisplayItemClass"
  ()
  ()
  [allocator
   (let* ([ctx::ScmSWFDisplayItem* (SCM_ALLOCATE ScmSWFDisplayItem klass)])
     (SCM_SET_CLASS ctx klass)
     (return (SCM_OBJ ctx)))])

(define-cclass <swf-character> :base "ScmSWFCharacter*" "Scm_SWFCharacterClass"
  ()
  ()
  [allocator
   (let* ([ctx::ScmSWFCharacter* (SCM_ALLOCATE ScmSWFCharacter klass)])
     (SCM_SET_CLASS ctx klass)
     (return (SCM_OBJ ctx)))])


;;(define-enum MING_VERSION)
;;(define-constant MING_VERSION_TEXT (c "0.4.4"))

(define-cproc ming-init () ::<int>
  (result Ming_init))

(define-cproc ming-cleanup () ::<void>
  (Ming_cleanup))

(define-cproc ming-collect-garbage () ::<void>
  (Ming_collectGarbage))

(define-cproc ming-use-constants (flag::<fixnum>) ::<void>
  (Ming_useConstants flag))

(define-cproc ming-set-cubic-threshold (num::<fixnum>) ::<void>
  (Ming_setCubicThreshold num))

(define-cproc ming-set-scale (scale::<real>) ::<void>
  (Ming_setScale scale))

(define-cproc ming-get-scale () ::<real>
  (result (Ming_getScale)))

(define-cproc ming-use-swf-version (version::<fixnum>) ::<void>
  (Ming_useSWFVersion version))

(define-cproc ming-set-swf-compression (level::<fixnum>) ::<int>
  (result (Ming_setSWFCompression level)))

;; Local variables:
;; mode: scheme
;; end:
